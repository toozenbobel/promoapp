//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.OfficesItemSampleData
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class OfficesItemSampleData { }
#else

	public class OfficesItemSampleData : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public OfficesItemSampleData()
		{
			try
			{
				Uri resourceUri = new Uri("/PromoApp;component/SampleData/OfficesItemSampleData/OfficesItemSampleData.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private Offices _Offices = new Offices();

		public Offices Offices
		{
			get
			{
				return this._Offices;
			}
		}
	}

	public class OfficesItem : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private Model _Model = new Model();

		public Model Model
		{
			get
			{
				return this._Model;
			}

			set
			{
				if (this._Model != value)
				{
					this._Model = value;
					this.OnPropertyChanged("Model");
				}
			}
		}

		private double _DistanceString = 0;

		public double DistanceString
		{
			get
			{
				return this._DistanceString;
			}

			set
			{
				if (this._DistanceString != value)
				{
					this._DistanceString = value;
					this.OnPropertyChanged("DistanceString");
				}
			}
		}
	}

	public class Offices : System.Collections.ObjectModel.ObservableCollection<OfficesItem>
	{ 
	}

	public class Model : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _Address = string.Empty;

		public string Address
		{
			get
			{
				return this._Address;
			}

			set
			{
				if (this._Address != value)
				{
					this._Address = value;
					this.OnPropertyChanged("Address");
				}
			}
		}
	}
#endif
}
